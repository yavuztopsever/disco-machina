tasks:
  # Project Manager Tasks
  - id: 0
    agent: project_manager
    name: Requirements Analysis
    description: >
      Analyze the requirements for the project goal: {project_goal}. 
      Create a comprehensive set of user stories with acceptance criteria.
      Identify key stakeholders and their needs.
      Document non-functional requirements and constraints.
      Please be sure to seek user feedback on the requirements.
    expected_output: User stories document with acceptance criteria
    depends_on: []
    
  - id: 1
    agent: software_architect
    name: Architecture Design
    description: >
      Design the system architecture for: {project_goal}. 
      Include component diagrams, data models, API specifications, and technology stack.
      Consider scalability, performance, security, and maintainability.
      The system should be well-structured and follow best practices.
      Please request feedback from the user on architectural decisions.
    expected_output: Architecture document with diagrams and specs
    depends_on: [0]
    
  - id: 2
    agent: software_architect
    name: Codebase Analysis
    description: >
      Analyze the existing codebase in {codebase_dir} if it exists.
      Identify code structure, dependencies, and areas for improvement.
      Suggest refactoring opportunities and potential code reuse.
      If it's a new project, recommend folder structure and organization.
    expected_output: Codebase analysis report
    depends_on: [1]
    
  - id: 3
    agent: project_manager
    name: Sprint Planning
    description: >
      Create a sprint plan for implementing {project_goal}. 
      Break down user stories into tasks with estimates.
      Prioritize tasks based on dependencies and value.
      Define sprint goal, backlog, and acceptance criteria.
      Include at least 2 sprints' worth of tasks.
      Please ask the user for approval of the sprint plan before proceeding.
    expected_output: Sprint plan document
    depends_on: [0, 1, 2]
    
  - id: 4
    agent: fullstack_developer
    name: Feature Implementation
    description: >
      Implement the features for {project_goal} based on the sprint plan and architecture design.
      Write clean, well-documented, and tested code.
      Follow the coding standards and architectural guidelines.
      Create new files or update existing ones in {codebase_dir}.
      Check with the user for feedback on implementation details.
    expected_output: Code implementation
    depends_on: [3]
    
  - id: 5
    agent: test_engineer
    name: Test Development
    description: >
      Create comprehensive tests for the implemented features for {project_goal}.
      Include unit tests, integration tests, and end-to-end tests.
      Ensure high code coverage and test edge cases.
      Document test cases and test plans.
      Ask for user feedback on test strategy.
    expected_output: Test suite and documentation
    depends_on: [4]
    
  - id: 6
    agent: test_engineer
    name: Code Review
    description: >
      Review the code implementation for {project_goal} for quality, correctness, and adherence to best practices.
      Identify bugs, code smells, and potential issues.
      Suggest improvements and optimizations.
      Check for security vulnerabilities and performance issues.
    expected_output: Code review report
    depends_on: [4, 5]
    
  - id: 7
    agent: software_architect
    name: Code Refactoring
    description: >
      Refactor the code for {project_goal} based on the code review and initial architecture.
      Improve code structure, readability, and maintainability.
      Apply design patterns where appropriate.
      Optimize performance and reduce complexity.
      Ensure that refactoring doesn't break existing functionality.
    expected_output: Refactored code
    depends_on: [6]
    
  - id: 8
    agent: software_architect
    name: Code Cleanup
    description: >
      Clean up obsolete code, remove unused dependencies, and fix technical debt for {project_goal}.
      Identify and address deprecated API usage.
      Remove commented-out code and dead code.
      Update outdated documentation and comments.
      Ensure consistent coding style and naming conventions.
    expected_output: Cleaned-up codebase
    depends_on: [7]
    
  - id: 9
    agent: project_manager
    name: Documentation Update
    description: >
      Update the documentation for {project_goal} to reflect the current state of the project.
      Include README, API documentation, and user guides.
      Document architecture, design decisions, and coding conventions.
      Create or update diagrams and examples.
      Please validate documentation with the user.
    expected_output: Updated documentation
    depends_on: [7, 8]
    
  - id: 10
    agent: project_manager
    name: Sprint Retrospective
    description: >
      Conduct a retrospective of the development process for {project_goal}.
      Analyze what went well and what could be improved.
      Document lessons learned and best practices.
      Create action items for future improvements.
      Please request user feedback on the final deliverables and development process.
    expected_output: Retrospective report with action items
    depends_on: [9]